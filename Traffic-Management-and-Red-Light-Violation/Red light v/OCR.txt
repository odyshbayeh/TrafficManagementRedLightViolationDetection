from ultralytics import YOLO
import cv2
import matplotlib.pyplot as plt
import glob
import os
import shutil
import requests
import time
import re

model = YOLO("/kaggle/input/redlight/license_plate_detector.pt")

img_paths = glob.glob("/kaggle/working/snapshots/*.jpg")

os.makedirs("/kaggle/working/plate_detected_imgs", exist_ok=True)

plates_dir = "/kaggle/working/plates_crops"
if os.path.exists(plates_dir):
    shutil.rmtree(plates_dir)
os.makedirs(plates_dir, exist_ok=True)

for idx, img_path in enumerate(img_paths):
    img = cv2.imread(img_path)
    if img is None:
        print(f"⚠️ Can't read image: {img_path}")
        continue

    results = model(img_path)

    for r in results:
        for box in r.boxes:
            x1, y1, x2, y2 = map(int, box.xyxy[0])
            cv2.rectangle(img, (x1, y1), (x2, y2), (0,255,0), 2)

    out_img_path = f"/kaggle/working/plate_detected_imgs/detected_{os.path.basename(img_path)}"
    cv2.imwrite(out_img_path, img)
    
    plate_count = 0
    for r in results:
        for box in r.boxes:
            x1, y1, x2, y2 = map(int, box.xyxy[0])
            x1, y1 = max(x1, 0), max(y1, 0)
            x2, y2 = min(x2, img.shape[1]), min(y2, img.shape[0])
            plate_crop = img[y1:y2, x1:x2]
            if plate_crop.shape[0] < 10 or plate_crop.shape[1] < 10:
                continue
            crop_path = f"/kaggle/working/plates_crops/plate_{idx}_{plate_count}.jpg"
            cv2.imwrite(crop_path, plate_crop)
            plate_count += 1

            if plate_count == 1:
                plt.figure()
                plt.imshow(cv2.cvtColor(plate_crop, cv2.COLOR_BGR2RGB))
                plt.title(f"Plate Crop Example from {os.path.basename(img_path)}")
                plt.axis('off')
                plt.show()

    if idx == 0:
        plt.figure()
        plt.imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))
        plt.title("Detected License Plate (Example)")
        plt.axis('off')
        plt.show()


# === OCR section ===
api_url = 'https://api.ocr.space/parse/image'
api_key = 'helloworld'  # replace with your real key for production

image_paths = glob.glob("/kaggle/working/plates_crops/*.jpg")

def ocr_space_api(img_path, api_url, api_key, max_retries=3):
    for attempt in range(max_retries):
        with open(img_path, 'rb') as f:
            response = requests.post(
                api_url,
                files={'filename': f},
                data={
                    'apikey': api_key,
                    'language': 'eng',
                    'OCREngine': 2
                }
            )
        try:
            result = response.json()
        except Exception as e:
            print(f"JSON decode error: {e}")
            result = {}
        if result.get('IsErroredOnProcessing') or 'ParsedResults' not in result:
            print('OCR API Error:', result.get('ErrorMessage', 'Unknown error'))
            if attempt < max_retries - 1:
                print(f"Retrying... ({attempt+1}/{max_retries})")
                time.sleep(3)
                continue
            return None, None
        parsed = result['ParsedResults'][0]['ParsedText']
        # Clean text
        cleaned = re.sub(r'[^A-Z0-9]', '', parsed.upper())
        # Extract pattern
        match = re.search(r'(\d{5}[A-Z])', cleaned)
        final_cleaned = match.group(1) if match else cleaned
        return parsed, final_cleaned
    return None, None

for img_path in image_paths:
    print('-'*40)
    print("Image:", img_path)
    parsed, final_cleaned = ocr_space_api(img_path, api_url, api_key)
    if parsed is None:
        print('Failed after retries.')
        continue
    print('OCR.space Result:', parsed)
    print('Cleaned:', final_cleaned)
